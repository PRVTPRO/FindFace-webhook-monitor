from fastapi import FastAPI, Request, Depends
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import json
from datetime import datetime, timedelta
import asyncio
from typing import List, Dict, Any
import uuid
import threading
import time
from sqlalchemy.orm import Session
from models import get_db
from services import SettingsService
from contextlib import asynccontextmanager

# Lifespan –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")    
    
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    db = next(get_db())
    try:
        SettingsService.create_default_settings(db)
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω—ã")
        print("üöÄ –ó–∞–ø—É—Å–∫ Notification Mark...")
        print("üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000")
        print("üîó API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        print("üì° Webhook endpoint: http://localhost:8000/ntf")
        print()
        print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("-" * 50)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    finally:
        db.close()
    
    yield
    
    # Shutdown
    print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

app = FastAPI(title="Notification Mark", lifespan=lifespan)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory="templates")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –ë–î)
notifications: List[Dict[str, Any]] = []

def cleanup_expired_notifications():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    while True:
        current_time = datetime.now()
        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 10 —Å–µ–∫—É–Ω–¥ (–∏–ª–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
        global notifications
        notifications = [
            n for n in notifications 
            if current_time - datetime.fromisoformat(n['timestamp']) < timedelta(seconds=10)
        ]
        time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
cleanup_thread = threading.Thread(target=cleanup_expired_notifications, daemon=True)
cleanup_thread.start()

@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/settings", response_class=HTMLResponse)
async def settings(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return templates.TemplateResponse("settings.html", {"request": request})

@app.post("/ntf")
async def webhook_handler(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    try:
        data = await request.json()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print("Received webhook data:", data)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞
        if isinstance(data, list):
            for item in data:
                if item.get('matched_card') and item['matched_card'].get('name'):
                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è thumbnail
                    thumbnail = item.get('thumbnail', '')
                    print(f"Processing notification for {item['matched_card']['name']}")
                    print(f"Thumbnail URL: {thumbnail}")
                    print(f"Thumbnail type: {type(thumbnail)}")
                    print(f"Thumbnail length: {len(thumbnail) if thumbnail else 0}")
                    
                    notification = {
                        'id': str(uuid.uuid4()),
                        'name': item['matched_card']['name'],
                        'timestamp': datetime.now().isoformat(),
                        'confidence': item.get('confidence', 0),
                        'camera_name': item.get('camera', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞–º–µ—Ä–∞'),
                        'created_date': item.get('created_date', ''),
                        'thumbnail': thumbnail,
                        'fullframe': item.get('fullframe', '')
                    }
                    
                    print(f"Created notification: {notification}")
                    notifications.append(notification)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
                    if len(notifications) > 100:
                        notifications.pop(0)
        
        return {"status": "success", "message": "Notification received"}
    
    except Exception as e:
        print(f"Error in webhook handler: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/api/notifications")
async def get_notifications():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return {"notifications": notifications}

@app.get("/api/settings")
async def get_settings(db: Session = Depends(get_db)):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return SettingsService.get_settings(db)

@app.post("/api/settings")
async def save_settings(request: Request, db: Session = Depends(get_db)):
    """API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        data = await request.json()
        success = SettingsService.save_settings(db, data)
        
        if success:
            return {"status": "success", "message": "Settings saved"}
        else:
            return {"status": "error", "message": "Failed to save settings"}
            
    except Exception as e:
        return {"status": "error", "message": str(e)}

@app.get("/api/settings/debug")
async def get_debug_settings(db: Session = Depends(get_db)):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–æ—Ç–ª–∞–¥–∫–∞)"""
    return {"settings": SettingsService.get_all_settings(db)}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
